-------------------------------------------------------------------------
Spring Security
-------------------------------------------------------------------------
-> For every application we should provide some security to protect that application from hackers.

-> In realtime applications, every client is asking to provide security

-> As per the most recent verizon data breach investigation report-2020, 43% of data breaches were attacks on web applications.

-> To protect our application from hacker attacks & data breaches we can use Spring Security concept.

---------------------------------------------------------------------------------

-> Spring Security works on a concept called JAAS (Java Authentication & Authorization Services).

-> In brief, Spring security mainly works on javax.servlet.Filter concept.

-> Filters are used to apply some pre-processing logic based on that we can decide weather to process that request or not.

-> In Spring Security we have predefined filter class to apply pre-processing logic for the request

			DelegatingFilterProxy

-> DelegaringFilterProxy will check for below 2 things

		1) Authentication
		2) Authorization


-> Authentication is the process of checking weather this user can access our application or not.

-> Authorization is the process of checking weather this user having access for this functionality/page or not.

---------------------------------------------------------------------------------
-> We can implement spring boot security authentication in below 3 ways

	i) In-Memory Credentials Security
	ii) Using Data base (JDBC)
	iii) Using UserDetailsService


-> We can implement spring boot security authorization in below 4 ways

i) permitAll  : no authorization required, all pages can be accessed
ii) authenticated : if authentication pass, page can access 
iii) hasAuthority : If user authenticated and authorized then only he can
iv) hasAnyAutority : if user having any role which are configure then it can access


--------------------------------------------------------------------------------------
Last Session : What is Authentication & Authorization & Spring Security
-------------------------------------------------------------------------

-> Spring team provided security module to protect our applications from hackers and from data breaches

-> Spring Security is providing below 2 functionalities

		1) Authentication
		2) Authorization

-> Authentication talks about weather the user can access our application nor not.

-> Authorization talks about weather the user having access for that functionality or not.

-> Spring Security works based on a filter. Spring Security using DelegatingFilterProxy.

-> If application having Spring Security then request will go to Filter first then it will go to dispatcher servlet.

----------------------------------------------------------------------------------Spring Security with In-Memory Credentials
----------------------------------------------------------------------------------
-> In-Memory credentials means with-in application we will configure credentials of the users.


1) Create Spring Boot application with below dependencies

		i) spring-boot-starter-web
		ii) spring-boot-starter-security
		iii) spring-boot-starter-thymeleaf
		iv) devtools


2) Create Controller class with Required methods

3) Create View Files using Thymeleaf

4) Create Security Config class

5) Run the application and test it.

----------------------------------------------------------------------------------
package in.ashokit.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class HomeController {

	@GetMapping("/home")
	public String getHomePage() {
		return "homePage";
	}

	@GetMapping("/welcome")
	public String getWelcomePage() {
		return "welcomePage";
	}

	@GetMapping("/admin")
	public String getAdminPage() {
		return "adminPage";
	}

	@GetMapping("/emp")
	public String getEmpPage() {
		return "empPage";
	}

	@GetMapping("/mgr")
	public String getMgrPage() {
		return "mgrPage";
	}

	@GetMapping("/common")
	public String getCommonPage() {
		return "commonPage";
	}

	@GetMapping("/accessDenied")
	public String getAccessDeniedPage() {
		return "accessDeniedPage";
	}

}
----------------------------------------------------------------------------------
package in.ashokit.security;

import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

	/**
	 * In this method we will configure Authentication credentials
	 */
	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {

		// {noop} --> No Operation for password encoder

		auth.inMemoryAuthentication().withUser("devs").password("{noop}devs").authorities("ADMIN");
		auth.inMemoryAuthentication().withUser("ns").password("{noop}devs").authorities("EMPLOYEE");
		auth.inMemoryAuthentication().withUser("vs").password("{noop}devs").authorities("MANAGER");

	}

	/**
	 * In this method we will configure Authorization roles
	 */
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		
			http.authorizeRequests()
				.antMatchers("/home").permitAll()
				.antMatchers("/welcome").authenticated()
				.antMatchers("/admin").hasAuthority("ADMIN")
				.antMatchers("/emp").hasAuthority("EMPLOYEE")
				.antMatchers("/mgr").hasAuthority("MANAGER")
				.antMatchers("/common").hasAnyAuthority("EMPLOYEE", "MANAGER")
				
				.anyRequest().authenticated()
				
				.and()
				.formLogin()
				.defaultSuccessUrl("/welcome",true)
				
				.and()
				.logout()
				.logoutRequestMatcher(new AntPathRequestMatcher("/logout"))
				
				.and()
				.exceptionHandling()
				.accessDeniedPage("/accessDenied");
		
	}

}
----------------------------------------------------------------------------------


Last Session : Spring Security with In-Memory Authentication
------------------------------------------------------------------------
Today's session : Spring Security with JDBC Authentication
-------------------------------------------------------------------------

-> In-Memory authentication means we will configure user credentials with in the application.

-> JDBC authentication means user credentials will be stored in database table.

---------------------------------------------------------------------------------
Spring Security with JDBC Authentication Example
---------------------------------------------------------------------------------
1) Create Encrypted password using BCryptPasswordEncoder

		BCryptPasswordEncoder bpe = new BCryptPasswordEncoder();
		String encode = bpe.encode("dev@123");
		System.out.println(encode);

Encoded Pwd : $2a$10$RAHywU81oPWWCDVfhRX1c.zRBbBldGDWfG2zPsfd1LQ1foIRd6sJW


2) Create Database table and insert dummy records

create table user_dtls 
(
 
 user_id integer,
 user_name varchar(30), 
 user_pwd varchar(100), 
 user_role varchar(20), 
 user_enabled integer
 
);

INSERT INTO user_dtls values(101,'dev','$2a$10$RAHywU81oPWWCDVfhRX1c.zRBbBldGDWfG2zPsfd1LQ1foIRd6sJW','ADMIN',1);

INSERT INTO user_dtls values(102,'ns','$2a$10$RAHywU81oPWWCDVfhRX1c.zRBbBldGDWfG2zPsfd1LQ1foIRd6sJW','EMPLOYEE',1);

INSERT INTO user_dtls values(103,'vs','$2a$10$RAHywU81oPWWCDVfhRX1c.zRBbBldGDWfG2zPsfd1LQ1foIRd6sJW','MANAGER',1);

******We need to execute below queries in our application For Authentication******

Query#1 : Retrieve username,password,enabled using username ;

♦ select user_name,user_pwd,user_enabled from user where user_name=?;

Query#2 : Retrieve username,role using username;

♦ select user_name,user_role from user where user_name=?;


3) Create Spring Boot application with required dependencies
	
		i)spring-boot-starter-web
		ii)spring-boot-starter-security
		iii)spring-boot-starter-thymeleaf
		iv) spring-boot-starter-jdbc
		v) ojdbc
		vi) devtools

4) Create Controller class with required methods

5) Create View Files Using Thymeleaf template

6) Create below Config classes

		i) AppConfig.java
		ii) SecurityConfig.java

7) Configure Server Port and Datasource properties in application.properties file
==================================================================================


Today's session : What is JWT Authentication
------------------------------------------------------------------------
-> What is Security ?

-> What is Authentication ?

-> What is Authorization ?

-> Spring Security with In-Memory Authentication 

-> Spring Security with JDBC Authentication
-------------------------------------------------------------------------

-> By using above In-Memory and JDBC Authentication we can secure web applications.

----------------------------------------------------------------------------------
How to secure Distributed application
----------------------------------------------------------------------------------
-> When one application is using services of other applications then implementation of security with  webservices concepts becomes more important.

-> In this scenario we will secure our application by using a token.

----------------------------------------------------------------------------------
-> JWT is standard mechanism to implement Token based security

-> JWT stands Json Web Tokens

-> JWT is not only for java, we can use this technique in other languages also to secure our applications.
----------------------------------------------------------------------------------

-> Token is a data which will be in the encoded format

-> We will use secret key to generate token

-> JWT token will have 3 parts

		i) header
		ii) payload
		iii) signature

Note: JWT Token each part will be seperated by comma (,)

Header : It contains JWT specific information

Payload : IT contains claims (Client ID, Client Name, Issuer Name, Audience Name, Date of Issue, Expirty Date etc..)

Signature : Base64 encoded form of header & payload, aditionally signed with secret key.


Sample Token
------------
eyJhbGciOiJIUzUxMiJ9.eyJqdGkiOiJ0azk5MzEiLCJzdWIiOiJteXRva2VuIiwiaXNzIjoiQXNob2sgSVQiLCJhdWQiOiJBQkNfSVQiLCJpYXQiOjE2MzA5ODQ2NTQsImV4cCI6MTYzMDk4ODI1NH0.8WN1DMPJ7dingc4pAFmPDQyk2SnfAJ-OutGHQ5gcy0qd1h1lc3rrTApc7tvI0l-aCYRB5CcxWbBHRUDlC9i8Zg


-----------------------------------------------------------------------------------------------
Steps to generate token using JWT
----------------------------------------------------------------------------------------------
1) Create Maven Project with below dependencies

	<dependencies>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt</artifactId>
			<version>0.9.1</version>
		</dependency>
		<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
			<version>2.3.0</version>
		</dependency>
	</dependencies>

2) Create below class



package in.ashokit;

import java.util.Base64;
import java.util.Date;
import java.util.concurrent.TimeUnit;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.JwtParser;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

public class JWTUtil {
	
	public static String generateToken(String subject, String secretKey) {
		
	return Jwts.builder()
			.setId("tk9931")
			.setSubject(subject)
			.setIssuer("Ashok IT")
			.setAudience("ABC_IT")
			.setIssuedAt(new Date(System.currentTimeMillis()))
			.setExpiration(new Date(System.currentTimeMillis()+ TimeUnit.HOURS.toMillis(1)))
			.signWith(SignatureAlgorithm.HS512, Base64.getEncoder().encode(secretKey.getBytes()))
			.compact();
	}
	
	public static void main(String[] args) {
		String secretKey = "mysecret@1";
		String subject = "mytoken";

		//Generating Token
		String token = JWTUtil.generateToken(subject, secretKey);
		//printing token
		System.out.println(token);
		
		//code to parse the token
		JwtParser parser = Jwts.parser();
		Claims claims = parser.setSigningKey(Base64.getEncoder().encode(secretKey.getBytes()))
							  .parseClaimsJws(token)
							  .getBody();

		//Printing token information
		System.out.println("Token ID : " + claims.getId());
		System.out.println("Token Issued By : " + claims.getIssuer());
		System.out.println("Token Generated :: "+ claims.getIssuedAt());
		System.out.println("Token Expiry :: " +claims.getExpiration());
	}
}

------------------------------------------------------------------------------










































































